PRACTICAL 9

Securing APIs with Azure Active Directory



1. Register an application in Azure AD to represent the API
Visit Azure Portal - 
Search App Registration-

Click on New Registration-
Provide proper name and click on Register –

It will redirects to Overview Page – 
Select to Expose an API – 
Set Default App URL-
Set value in opened scope page – 
Register an application in Azure AD to represent a client Application – 
Navigate to Azure Home Page – 
Again search App Registration – 

Click on New Registration
Now click on Register-
You will redirect to this page – 
Select Certificate and Secrets – 
And select client Secret – Add Description and Expires details- 
Grant Permission in Azure AD –
Navigate to Azure Portal –
Choose your client app and grant permission –
Select View All permission –
Click on Add permission – 
Select on My Api and select your App-
Add Required Permission under Delegated Permission – 
Page will look like this –
Now enable OAUTH 2.0 user Authorization – 
Navigate to Azure Homepage – 
Search API Management Instance – 
Select OAuth 2.0
Add OAuth 2.0 – 
Enter all details as below – 
Click on create button – 
Now navigate to Client App - KJ-WeatherForecastClient-
Now add a platform as web – 
Paste the Redirect URL and click on configure-
Page will look like this – 
Now to enable OAuth 2.0 user authorization for your API – 
Browser API Management service and select your service- 
Select API
Select “echo api” – any api you want to protect – 
Now move to setting and Select OAUTH 2.0 which have been configured –
Now click on Save-


Issuing a custom JWT token using a symmetric signing key
Create new Asp.Net Core Project –
Enter Details and Select API Option – 
Follow below steps – 
Create Startup.cs and use below Code – 
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Auth.Demo
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
            var key = "This is my test key";

            services.AddAuthentication(x =>
            {
                x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;

            }).AddJwtBearer(x =>
            {
                x.RequireHttpsMetadata = false;
                x.SaveToken = true;
                x.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(System.Text.Encoding.ASCII.GetBytes(key)),
                    ValidateIssuer = false,
                    ValidateAudience = false




                };
            
            
            
            
            });

            services.AddSingleton<IJWTAuthenticationManager>(new JwtAuthenticationManager(key));



        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseRouting();

            app.UseAuthentication();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}

Create Interface - IJWTAuthenticationManager.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Auth.Demo
{
    public interface IJWTAuthenticationManager
    {
        string Authenticate(string username, string password);
    }
}

Create class - JWTAuthenticationManager.cs
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;

namespace Auth.Demo
{
    public class JwtAuthenticationManager : IJWTAuthenticationManager
    {
        private readonly IDictionary <string, string> users = new Dictionary<string, string>
        { { "test1", "password1"},{ "test2","password2"} };
        private readonly string key;

        public JwtAuthenticationManager(string key)
        {
            this.key = key;
        }

        
        public string Authenticate(string username, string password)
        {
            if (!users.Any(u => u.Key == username && u.Value == password))
            {
                return null;
            }

            var tokenHandler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var tokenKey = System.Text.Encoding.ASCII.GetBytes(key);
            var tokenDescriptor = new Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor
            {
                Subject =  new System.Security.Claims.ClaimsIdentity(new Claim[]
                { 
                    new Claim(ClaimTypes.Name,username)
                }),
                Expires =DateTime.UtcNow.AddHours(1),
                SigningCredentials =
                new SigningCredentials(new SymmetricSecurityKey(tokenKey),
                Microsoft.IdentityModel.Tokens.SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);

            return tokenHandler.WriteToken(token);
        }
    }
}

Create NameController.cs and follow below code – 
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace Auth.Demo.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    public class NameController : ControllerBase
    {
        private readonly IJWTAuthenticationManager jWTAuthenticationManager;

        public NameController(IJWTAuthenticationManager jWTAuthenticationManager)
        {
            this.jWTAuthenticationManager = jWTAuthenticationManager;


        }

        // GET: api/<NameController>
        [HttpGet]
        public IEnumerable<string> Get()
        {
            return new string[] { "KURLA", "ULHASNAGAR" };
        }

        // GET api/<NameController>/5
        [HttpGet("{id}")]
        public string Get(int id)
        {
            return "value";
        }

        [AllowAnonymous]
        [HttpPost("authenticate")]
        public IActionResult Authenticate([FromBody] UserCred userCred)
        {
            var token = jWTAuthenticationManager.Authenticate(userCred.Username, userCred.Password);
            if (token == null)
                return Unauthorized();
            
            return Ok(token);
        }
    }
}

Create UserCred.cs and follow below code –
namespace Auth.Demo.Controllers
{
    public class UserCred
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
} 

Keep Program.cs as it is- 
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Auth.Demo
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}


In next step, getting error as below – 

Steps need to follow once the above issue get fixed.

1.Now run the application and paste the URL in Postman-
2.Pass the data as below
3.Use data as –
4.
{“username”:”test1”,”password”:”password1” }
A token will get generated in encrypted form. Pass the Authorization key value with generated token.






