p10 - AIM : Automate the process of logging and taking screenshots in UiPath 
THEORY :
UiPath has a multi-process architecture that offers to execute each workflow separately in
the executor. Executors are managed by UI robots. So, if any executor stops working, then
the entire process will not be affected.
STEPS :
Common
 Continue on error - Specifies if the automation should continue even when the activity throws an 
error. This field only supports Boolean values (True, False). The default value is False. As a result, if 
the field is blank and an error is thrown, the execution of the project stops. If the value is set to True, 
the execution of the project continues regardless of any error.
 Delay before - Delay (in seconds) between the time the previous activity is completed and the time 
this activity begins performing any operations. The default value is 0.2 seconds. Adding a delay 
between activities ensures that one activity has enough time to complete before the next activity 
begins.
 Delay before screenshot - Delay (in seconds) between the time the element is brought into the 
foreground and the time the screenshot is taken. The default value is 0.2 seconds.
 DisplayName - The name displayed for the activity in the Designer panel. A display name is 
automatically generated when you indicate a target.
 Timeout - Specify a number of seconds for which to wait for the activity to be executed before 
throwing an error. The default value is 30 seconds.
Input
 Auto increment - Select what to append to the filename when saving the screenshot in case of 
filename conflicts. For example, if a file with the same name as the one you save already exists, 
choosing Index keeps the file name, creating a new file for each screenshot and adding an index 
number to each, consecutively. The options are None (if a file with the same name already exists, 
replace it), Index (add a number to the filename, for example screenshot (1).png), or DateTime (add 
the date and time when the screenshot is taken to the filename in the format YYYY.MM.DD at 
HH.MM.SS).
 File name - The name of the file where the screenshot of the specified UI elemend will be saved.
 Target - Before indicating on screen the application you want to automate, this field is set to (null). 
Once the target is indicated, all properties regarding the element that was indicated are displayed.
o Target.Click Offset - Specifies an offset for the click activity, which can be further configured.
o Target.Click Offset.Anchoring Point - Describes the starting point of the cursor to which offsets from 
OffsetX and OffsetY properties are added. The following options are available: TopLeft, TopRight, 
BottomLeft, BottomRight, and Center. By default, Center is selected.
o Target.Click Offset.OffsetX - Horizontal displacement of the cursor position according to the option 
selected in the Position field. This field supports only Int32 variables.
o Target.Click Offset.OffsetY - VerticaldDisplacement of the cursor position according to the option 
selected in the Position field. This field supports only Int32 variables.
o Target.Fuzzy selector - The parameters for the fuzzy selector.
o Target.Native text - The text that is used to identify the target element.
o Target.Selector - The selector that is generated for the indicated element.
o Target.Targeting methods - The selector types that you want to use for identifying the element. This 
property can be set to any combination of Selector, Fuzzy selector, or Image.
o Target.Visibility check - Checks whether the UI element is visible or not. There are three options 
available:
 None - Does not check for visibility.
 Interactive (for Fuzzy Selector) - Checks if the element is potentially visible, ignoring page scroll and 
obstructions by other apps, or the fact that the application is minimized. This check is useful when 
trying to ensure that you are not targeting invisible elements that exist in the DOM but are hidden.
 Fully visible - Checks if the UI element is visible or not.
o Target.Wait for page load - Before performing the action, wait for the application to become ready 
to accept input. The following options are available:
 None - Does not wait for the target to be ready.
 Interactive - Waits until only a part of the app is loaded.
 Complete - waits for the entire app to be loaded.
o Target.Window selector (Application instance) - The selector that is used for the application 
window. Only applicable when the window attach mode is set to Application instance.
Input/Output Element
 Input Element - The Input UI Element that defines the screen element that the activity will be 
executed on.
 Output Element - Output a UI Element to use in other activities as an Input UI Element.
Misc
 Private - If selected, the values of variables and arguments are no longer logged at Verbose level.
Output:
 Saved file path - The full path to the file where to save the screenshot, including the appended suffix, 
if applicable. This also dictates where the Auto increment property saves the indexed screenshot 
files.
 Saved image - The screenshot saved as Image; used when Output is set to image
















p10b - AIM : Automate any process using State Machine in UiPath 
STEPS :
1. Create a blank process and, on the Design tab, in the File group, select New > State Machine. 
The New State Machine window is displayed.
2. In the Name field type a name for the automation, such as "First State Machine", and leave the 
default project location or add a subfolder. Click Create. The Designer panel is updated 
accordingly.
3. Create two integer variables, InitialGuess and RandomNumber. The first variable stores your guess, 
while the second stores the random number.
4. Add a State activity to the Designer panel and connect it to the Start node. This is the initial 
state, and it is used to generate a random number.
5. Double-click the activity. This State activity is displayed expanded in the Designer panel.
6. In the Properties panel, in the DisplayName field, type Initializing Random Number. This 
enables you to easily tell states apart.
7. In the Entry section, add an Assign activity.
8. In the To field, add the RandomNumber variable.
9. In the Value field, type new Random().Next(1,100). This expression generates a random number.
10. Return to the main project view and add a new State activity.
11. Connect it to the previously added activity.
12. Double-click the last added State activity. This activity is displayed expanded in 
the Designer panel.
13. In the Properties panel, in the DisplayName field, type Guess Number. This state is used to 
prompt the user to guess a number.
14. In the Entry section, add an Input Dialog activity.
15. Select the Input Dialog, and in the Properties panel, add an appropriate Label and Title to 
prompt the user to guess a number between 1 and 100.
16. In the Result field, add the InitialGuess variable. This variable stores the user’s guess.
17. Return to the main project view and create a transition that points from the Guess Number state to 
itself.
18. Double-click the transition. The transition is displayed expanded in the Designer panel.
19. In the Properties panel, in the DisplayName field, type Try Smaller. This message is displayed 
on the arrow, enabling you to run through your automation easier.
20. In the Condition section, type InitialGuess > RandomNumber. This verifies if the user’s guess is 
bigger than the random number.
21. In the Action section, add a Message Box activity.
22. In the Text field, type something similar to "Your guess is too big. Try a smaller number." This 
message is displayed when the user’s guess is bigger than the random number.
23. Return to the main project view and create a new transition that points from the Guess 
Number state to itself.
24. Double-click the transition. The transition is displayed expanded in the Designer panel.
25. In the Properties panel, in the DisplayName field, type "Try Bigger". This message is displayed 
on the arrow, enabling you to run through your automation easier.
26. In the Condition section, type InitialGuess < RandomNumber. This verifies if the guess is smaller 
than the random number.
27. In the Action section, add a Message Box activity.
28. In the Text field, type something similar to "Your guess is too small. Try a bigger number." This 
message is displayed when the users guess is smaller than the random number.
29. Return to main project view and add a Final State activity to the Designer panel.
30. Connect a transition from the Guess Number activity to the Final State.
31. In the Properties panel, in the DisplayName field, type "Correct Guess".
32. In the Condition field, type InitialGuess = RandomNumber. This is the condition on which this 
automation steps to the final state and end.
33. Double-click the Final State activity. It is displayed expanded in the Designer panel.
34. In the Entry section, add a Message Box activity.
35. In the Text field, type something similar to "Congratulations. You guessed correctly! The number 
was " + RandomNumber.ToString + "." This is the final message that is to be displayed, when the user 
correctly guesses the number.










p10c -AIM : Demonstrate the use of publish utility. 
STEPS :
1. In Studio, create a new project.
2. In the Design ribbon tab, click Publish. The Publish window opens. Notice that the window's title 
bar changes depending on the context:
o Publish Process when publishing a process;
o Publish Library when publishing a library project;
o Publish UI Library when publishing a UI library project;
o Publish Test Cases when publishing test cases.
o Publish Templates when publishing templates.
3. In the Package Properties tab:
o Enter a name for the package. The drop-down list contains up to 5 of the most recent names of 
packages that you previously published.
o In the Version section, review the Current Version of your project, and type a New Version if 
needed. Check the Is Prerelease box to mark the version as alpha. Please note that this 
automatically changes the project’s version schema to semantic. When publishing a new version 
of the file locally, make sure that the custom location does not already include a file with the same 
proposed version number. For more details about project versioning, check the About 
Automation Projects page.
o Optionally, use the Project Icon option to define a custom icon for the project. You can browse to 
and select a file, or enter a path or public URL to a jpeg, jpg, or png file up to 1MB in size.
After the project is published, the icon is displayed as follows:
 For processes, in the Assistant next to the process name, making it easier to identify it in the list of 
processes.
 For templates, next to the template in Home (Studio Backstage View) > Templates.
 For libraries, next to the package in the Manage Packages window in Studio.
The icon is not visible in Manage Packages if a local file is used for a library published to 
Orchestrator or to a feed that does not support embedded icons, In this case, specify the icon using 
a URL.
o In the Project tags box, you can add one or more tags to the project, either by creating new ones 
or by reusing tags already defined in Orchestrator. There are two types of 
tags: labels and properties (key-value pairs). Tags are included in the published package and they 
help describe and categorize projects. For example, they can refer to the automated application 
(an Excel label) or the department (a department:accounting key-value property).
When you start typing, possible matches are suggested from already defined tags, and you can 
reuse one by selecting it from the list of matches. For a property match, the key followed by 
the : (colon) character is displayed first, and the associated values are displayed after you select 
the key,
To add a new tag, after you enter the name, click the entry with the plus sign next to the name. 
Separating strings with the : (colon) character enables you to add properties, while entries that 
don't contain a : add labels.
Labels and key-value properties are limited to 256 characters. Tag names can't contain these 
characters: <, >, %, &, \, ?, /, :.
Project tags can be automatically applied to processes in Orchestrator. For more information about 
using tags, see Organizing resources with tags in the Orchestrator guide.
o In the Release Notes text box, enter details about the version and other relevant information. 
Release notes for published projects are visible in the Packages section in Orchestrator. Please 
note that the Release Notes field accepts a maximum of 10,000 characters.
4. Click Next.
If you are publishing a template, the Template info tab opens next (step 5). Otherwise, proceed to 
step 6.
5. (For templates only) In the Template info tab, provide the following information, and then 
click Next:
o Name - The name of the template.
o Description - The template description in the Templates tab.
o Default Project Name - The default project name when creating a new project using this 
template.
Note: Avoid using punctuation marks, separator characters, and characters that are 
not allowed in file names. These characters may be removed from the default name when 
the template is used.
o Default Project Description - The default description when creating a new project using 
this template.
In the Publish options tab, select where to publish the project. The available options depend on the type of 
project you are publishing:
 For processes (including StudioX projects):
o Orchestrator Tenant Processes Feed, Orchestrator Personal Workspace Feed and, if a first-level 
folder with a separate package feed or one if its subfolders is selected from the folders menu in the Studio 
status bar, the feed for that folder hierarchy. These options are available if Studio is connected to 
Orchestrator. The Orchestrator Personal Workspace Feed is available only if your user has the Personal 
Workspace feature enabled in Orchestrator.
If the Personal Workspace or a folder from a hierarchy with a separate package feed is selected in Studio, 
the feed for that folder is the default option. Otherwise, the tenant feed is the default option. If you already 
published a project in the current session, the last publish location you used is the default selection until 
you close Studio or change the Orchestrator folder from the Studio status bar.
o Assistant (Robot Defaults) - the default package location for the Robot and 
Assistant, C:\ProgramData\UiPath\Packages. Projects published here automatically appear in the Assistant. The 
option is not available if Studio is connected to Orchestrator.
o Custom - either a custom NuGet feed URL or local folder. Adding an API Key is optional.
 For test cases:
o The same options that are available for processes, with the exception of Orchestrator Personal Workspace 
Feed.
 For libraries and UI libraries:
o Orchestrator Tenant Libraries Feed or Orchestrator Shared Libraries Feed - available if Studio is 
connected to Orchestrator. The available option depends on whether the tenant libraries feed is enabled in 
Orchestrator.
o Custom - either a custom NuGet feed URL or local folder. Adding an API Key is optional.
 For templates:
o Orchestrator Tenant Libraries Feed or Orchestrator Shared Libraries Feed - available if Studio is 
connected to Orchestrator. The available option depends on whether the tenant libraries feed is enabled in 
Orchestrator.
o Local - the location for publishing templates locally, by default: C:\Users\User\Documents\UiPath\.templates.
o Custom - either a custom NuGet feed URL or local folder. Adding an API Key is optional.
If you are publishing a library or any project with the Windows or cross-platform compatibility except for 
templates, additional settings are available in the Publish options tab under Compilation Settings:
 (For libraries only) Activities Root Category - enter a name for the category under which the reusable 
component will be listed in the Activities panel.
 Include Sources - select this option to package all .xaml sources within the published package, including 
workflows that were previously made private. For Windows - Legacy libraries, the files are saved in the 
generated assembly file and in the lib\net45 folder in the .nupkg file. For Windows and cross-platform 
libraries and processes, the files are saved in the content folder in the .nupkg file.
 Remove Unused Dependencies - select this option to remove all installed packages that are not referenced 
in the project. This option is not available for Windows-legacy processes.
 (For Windows-legacy libraries only) Compile activities expressions - select this option to compile and 
package all activities expressions. This results in an improved execution time.
 (For Windows - legacy libraries only) Ready to Run - select this option to optimize the generated 
assemblies for faster JIT compilation at runtime.
 Click Next to advance to the Certificate signing tab, or Publish to publish your project.
 (Optional) In the Certificate Signing tab, add a local Certificate Path next to 
the Certificate box. Furthermore, add the Certificate Password and an optional 
certificate Timestamper if needed. For more details, check out the Signing
 Click Publish. A NUPKG file is created and uploaded to Orchestrator, the custom NuGet feed, or 
saved in the local directory. Depending on the project, the package contains:
o For template projects and processes with the Windows - Legacy compatibility, the project 
source files.
o For libraries and projects with the Windows or Cross-platform compatibility, compiled 
DLL files.
 If the project is published successfully, the Info dialog box is displayed and the project is copied 
to the NuGet location set in the NuGetServerUrl parameter, in the UiPath.settings file




















p10d - AIM : Create and provision Robot using Orchestrator 
THEORY :
When deploying multiple Standard Robots from the same machine on Orchestrator, you need to have the 
same Machine Name and Machine Key for each. To retain the values in the fields, you can click Create 
Another in the Add Robot window. Alternatively, you can copy the Machine Name and Machine 
Key from an already deployed Robot by clicking More Actions > Duplicate.
STEPS :
1. In Orchestrator, on the Robots page, click Add. The options to add a Standard Robot or 
a Floating Robot are displayed.
2. Click the Standard Robot button. The Create a New Standard Robot window is displayed.
3. Select the Standard Machine you want to register your Robot on. There are two possibilities:
a. You had already created the machine on the Machines page beforehand. In this case, you 
can select it from the Machine drop-down list.
b. You had not created the machine. In this case, simply type the name of a new one on 
the Machines field and click the Provision Machine button. Note that this step also adds the 
machine in the Machines page.
4. In the Name field, type any name for the Robot.
5. In the Domain\Username field, type the username that is used to login to the specified 
machine. If the user is in a domain, you are required to specify it in 
a DOMAIN\username format. You must use short domain names, such 
as desktop\administrator and NOT desktop.local/administrator.
6. (Optional) Add the Windows password for the specified username.
7. Select the desired robot type from the Type drop-down list. For more information, see 
the About Robots page.
8. (Optional) Add a description for the Robot. We recommend populating this field, especially 
when dealing with an environment with many robots.
9. Click Create. The Robot is now displayed on the Robots page and provisioned to 
Orchestrator, but it is offline