Practical No 5
Aim : Building ASP.Net core REST API
Source Code : 
Step 1 : Create a webAPI
Open command prompt and give the command 
dotnet new webapi -o Glossary

 Now enter into the glossary folder and then run the project
 
Step 2 : Open another command prompt & give curl command to view the output
 
Step 3 : Delete the weatherforecast.cs from the Glossary Folder i.e root folder and also from the Controller Folder.

Step 4: Create a class file in the Glossary folder named “GlossaryItem.cs”
namespace Glossary
{
	public class GlossaryItem
	{	
    	public string Term { get; set;}
		public string Definition { get; set; }
	}
}

Step 5 : Create a class file in the Controller folder named “GlossaryController.cs”
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using System.IO;

namespace Glossary.Controllers;

[ApiController]
[Route ("api/[controller]")]

public class GlossaryController : ControllerBase
{
	private static List<GlossaryItem> Glossary = new List<GlossaryItem> 
	{
		new GlossaryItem
		{
			Term= "HTML",
			Definition = "Hypertext Markup Language"
		},
		new GlossaryItem
		{
			Term= "MVC",
			Definition = "Model View Controller"
		},
		new GlossaryItem
		{
			Term= "OpenID",
			Definition = "An open standard for authentication"
		}
	};

    [HttpGet]
    public ActionResult<List<GlossaryItem>> Get()
	{ 
		return Ok(Glossary);
	}
	
	[HttpGet]
	[Route("{term}")]
	public ActionResult<GlossaryItem> Get(string term)	
	{
		var glossaryItem = Glossary.Find(item =>
		item.Term.Equals(term, StringComparison.InvariantCultureIgnoreCase));
		if (glossaryItem == null)
		{ 
			return NotFound();
		} else
		{
			return Ok(glossaryItem);
		}
	}

	[HttpPost]
	public ActionResult Post(GlossaryItem glossaryItem)
	{
		var existingGlossaryItem = Glossary.Find(item =>
			item.Term.Equals(glossaryItem.Term, StringComparison.InvariantCultureIgnoreCase));
		if (existingGlossaryItem != null)
		{
			return Conflict("Cannot create the term because it already exists.");
		}
		else
		{
			Glossary.Add(glossaryItem);
			var resourceUrl = Path.Combine(Request.Path.ToString(), Uri.EscapeUriString(glossaryItem.Term));
			return Created(resourceUrl, glossaryItem);
		}
	}

	[HttpPut]
	public ActionResult Put(GlossaryItem glossaryItem)
	{
		var existingGlossaryItem = Glossary.Find(item =>
			item.Term.Equals(glossaryItem.Term, StringComparison.InvariantCultureIgnoreCase));
		if (existingGlossaryItem == null)
		{
			return BadRequest("Cannot update a nont existing term.");
		} else
		{
			existingGlossaryItem.Definition = glossaryItem.Definition;
			return Ok();
		}
	}

	[HttpDelete]
	[Route("{term}")]
	public ActionResult Delete(string term)
	{
		var glossaryItem = Glossary.Find(item =>
			item.Term.Equals(term, StringComparison.InvariantCultureIgnoreCase));
		if (glossaryItem == null)
		{ 
			return NotFound();
		}
		else
		{ 
			Glossary.Remove(glossaryItem);
			return NoContent();
		}
	}
}

Step 6 : To stop the application running on command prompt do Ctrl+c

Step 7 : Now restore, build and then run the program