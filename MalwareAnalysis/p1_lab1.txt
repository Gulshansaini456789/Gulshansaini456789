P1 - Lab1

1. Upload the files to http://www.VirusTotal.com/ and view the reports. Does either file match any existing antivirus signatures?
   upload the  lab1.exe and lab1.dll file on virusTotal for detecting antivirus signature
   In lab1.exe the detection rate is 35/65 and 
   In lab1.dll the detection rate is 28/64

2. When were these files compiled?
   Open the lab1.exe and lab1.dll file in PEview
   Using PEview we are able to view the information. The information is found under:
   IMAGE_NT_HEADERS > IMAGE_FILE_HEADER > Time Date Stamp
   lab01-01.exe compile time - 2010-12-19 Sunday 16:16:19 UTC
   lab01-01.dll compile time - 2010-12-19 Sunday 16:16:38 UTC

3. Are there any indications that either of these files is packed or obfuscated? If so, what are these indicators?
   No, there’s no indicators these files are packed or obfuscated due to the following:
   Using PEiD we can identify them as being compiled with Microsoft Visual C++ 6.0.
   Open the lab1.exe and lab1.dll file in PEid
   Using PEview we can see the virtual size is close to the raw size of the files.
   In PEview open the file lab1.exe and lab1.dll and observe the virtual size and raw size
   Using the Malcode Analyst Pack/bintext.exe we can view “strings” and see there’s plenty of them.

4. Do any imports hint at what this malware does? If so, which imports are they?
   Analysing Lab01-01.exe through Dependency Walker highlighted a number of interesting functions imported from KERNEL32.DLL, these were:
   CopyFile
   FindFirstFile
   FindNextFile
   Based on this we can infer that files would likely be searched for on the file system and files would be copied.
   Analysing Lab01-01.dll through Dependency Walker highlighted functions imported from KERNEL32.DLL, these were:
   CreateProcess
   Sleep
   Based on this we can infer that the dll would likely spawn a new process and sleep (pause execution) at some stage.
   The DLL also had some interesting imports from WS2_32.DLL through the use of the ‘Ordinal Number’.
   Matching the Ordinal Number to the associated name, these functions were:
   closesocket
   connect
   htons
   inet_addr
   recv
   send
   shutdown
   socket
   WSAStartup
   WSACleanup
   Based on this we can infer that the program has connects to a network or IP of some kind and opens up a socket to send and receive packets.

5. Are there any other files or host-based indicators that you could look for on infected systems?
   open the file lab1.exe in bintext.exe/Malcode Analyst Pack.
   Examining the strings contained within Lab01-01.exe more closely reveals that it is referencing a file called C:\windows\system32\kerne132.dll. 
   This is a very subtle misspelling of the legitimate Kernel32.dll file (notice the use of 1 instead of l) because of this it is likely malicious and we are able to use this to search for infected systems.
   Open the lab1.exe and lab1.dll file in Bintext application to see this.

6. What network-based indicators could be used to find this malware on infected machines?
   open the file lab1.exe in Malcode Analyst Pack/bintext.exe.
   Examining the strings contained within Lab01-01.dll more closely reveals that there is what appears to be an IP address. 
   Because of this and the network imports, it is highly likely that this DLL contacts this IP address, and as such we are able to use this to find infected systems which have contacted 127.26.152.13.

7. What would you guess is the purpose of these files?
   Based on everything we’ve enumerated above, we would guess that the executable is used to run the DLL which acts as a backdoor or remote access trojan (RAT). 
   Based on the imports it’s possible the executable searches to see if C:\windows\system32\kerne132.dll exists, and if it doesn’t it may attempt to copy the malicious DLL to C:\windows\system32\kerne132.dll which is used for persistence. Upon executing the DLL,
   it likely contacts a C2 server at 127.26.152.13.


P1 - Lab 1-2

1. Upload the Lab01-02.exe file to http://www.VirusTotal.com/. Does it match any existing antivirus definitions?
   Using the Malcode Analyst Pack we are able to perform this by simply right clicking the files and selecting VirusTotal. At the time of writing the file matched existing antivirus signatures:
   open the the file lab01-02.exe in virusTotal. The detection rate is 45/70.
   
2. Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.
   Diving in with a different tool called Exeinfo PE, we are able to determine that this file is packed using the Ultimate Packer for eXecutables (UPX). This also gives me some information on how to unpack the executable using UPX.
   In addition, we can use VirusTotal to view Section names, properties, a small number of imports, and a section with a raw size significantly smaller than the virtual size which all indicate that this file is packed with UPX.
   Open the file lab01-02.exe in virusTotal to check the UPX
   Following the unpacking guidance, we can unpack this executable giving to a new file.
   Open the command prompt and open the derictory by using the comand
   cd
   Then to unpack the file type the command:
   upx -d Labd01-02.exe
  
3. Do any imports hint at this program’s functionality? If so, which imports are they and what do they tell you?
   Analysing Lab01-02.exe through Dependency Walker highlighted the below interesting functions or imports:
   WININET.DLL
   InternetOpenUrl
   InternetOpen
   ADVAPI32.DLL
   reateService
   StartServiceCtrlDispatcher
   OpenSCManager
   Based on this we can infer that the executable creates and triggers a service, and that it connects to the internet.

4. What host- or network-based indicators could be used to identify this malware on infected machines?
   open the file lab1.exe in Malcode Analyst Pack/bintext.exe.
   Looking at the strings of this file shows 2 interesting elements, ‘malservice’ and ‘http://www.malwareanalysisbook.com’.
   Based on this we can assume that searching hosts for the scheduled service called ‘malservice’ and looking at any hosts connectiong to ‘http://www.malwareanalysisbook.com’ would serve as reliable host and network indicators.

P1 - Lab 1-3

1. Upload the Lab01-03.exe file to http://www.VirusTotal.com/. Does it match any existing antivirus definitions?
   open the file lab01-03 in virusTotal.There are 55/65 detection rate.

2. Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.
   By using virustotal it is analyised that the file is packed using FSG
   OR CAN USE
   Once again, trying a different tool to keep things fresh, PE Detective revealed that this file was packed this time using FSG.
   Using PEiD reveals that there are no import tables for the section like previously seen, which seems extremely strange. The raw hex almost looks like it is supposed to be importing something similar to loadlibrary and getprocaddress.
   Looking at this(Open the file in dependency walker) through dependency walker revealed that these were indeed being imported. With only these libraries it is a very good indication that this binary is packed.

3. Do any imports hint at this program’s functionality? If so, which imports are they and what do they tell you?
   At present the file is packed with FSG, and we are unable to unpack this with the techniques learnt so far.

4. What host- or network-based indicators could be used to identify this malware on infected machines?
   At present the file is packed with FSG, and we are unable to unpack this with the techniques learnt so far.


P1 - Lab 1-4

1.  Upload the Lab01-04.exe file to http://www.VirusTotal.com/. Does it match any existing antivirus definitions?
    Getting creative with our VirusTotal submissions, we can check the file hash by using the VirusTotal API and some basic PowerShell. At the time of writing this had 53 detections.

2.  Are there any indications that this file is packed or obfuscated? If so, what are these indicators? If the file is packed, unpack it if possible.
    There are no indications this file is packed or obfuscated, PEiD identifies it was created with Microsoft Visual C++ 6.0, PEview shows similar virtual and raw data size, and dependency walker shows a number of imports.
    open the file in PEview to check the raw data size, virtual data size and Timestamp,
    open the file lab01-04.exe in PEiD TO  identifies it was created with Microsoft Visual C++ 6.0,
    Open the file lab01-04.exe in dependency walker to check the imports.

3.  When was this program compiled?
    To check this open the file lab01-04 in PEview to check the TimeDateStamp
    In section IMAGE_IN_HEADERS  -> signature -> IMAGE+FILE_HEADER

4.  Do any imports hint at this program’s functionality? If so, which imports are they and what do they tell you?
    Based on the imports from Kernel32 we can see that this will load resources from the file’s resource section and write files to disk. Based on the GetWindowsDirectory function we can assume this will write files to the system directory, and will then execute them due to the WinExec function.
    The imports from Advapi32 indicate that this is attempting to modify or change the token assigned to the execution of this process, presumably to elevate privileges or give extended access rights.
    
5.  What host-based or network-based indicators could be used to identify this malware on infected machines?
    Looking into the strings of this file, we can see an entry for the following host indicators:
    winup.exe
    system32\wupdmgrd.exe
    The strings also indicate the below network-based url which may be where a malware updater or second stage payload is pulled from.
    http://practicalmalwareanalysis.com/updater.exe

6.  This file has one resource in the resource section. Use Resource Hacker to examine that resource, and then use it to extract the resource. What can you learn from the resource?
     open the file in Resource Hacker
    Looking at this resource through Resource Hacker, we can see that it has a header which indicates it is an embedded executable.
    By saving this as a binary (executable) file, we can then open it in dependency walker and see this is the file which not only contains the winexec imported function of kernel32, but also the URLDownloadToFile function of URLMON.DLL which indicates it will likely download and execute a file.
    

   
   