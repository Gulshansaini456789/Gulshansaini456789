P3 - lab03-01

1. What are this malware’s imports and strings?
   Looking at a new tool, we’re able to open this up in PE Studio to gain a lot of insight into the file, and determine both its imports and strings.
   Based on the low number of imports we can assume this file is packed.
   If we take a look at the strings though we see a number of interesting entries which we typically wouldn’t expect to see on a packed file.

2. What are the malware’s host-based indicators?
   Attempting to run this file within a Windows 7 and Windows 10 VM causes it to crash and fail.
   By running the malware in a Windows XP environment we are able to see what the original functionality of this file was:
   The host based indicators are as follows:
   A Mutex - AKA Mutual Exclusion (this is essentially a lock on a resource), is created for “WinVMX32”.
   The malware is copied to a file called “vmx32to64.exe” which is dropped within C:\Windows\System32.
   A registry key is created at HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\VideoDriver for persistence indicating whenever the system starts it should run the copied malware.

3. Are there any useful network-based signatures for this malware? If so, what are they?
   By directing our Windows XP traffic through another host we can use a utility such as Fakenet-NG or ApateDNS to intercept the requests.
   Through doing this we can see the below:
   www[.]practicalmalwareanalysis[.]com is resolved
   Had we allowed the malware to establish a connection we would see it sending random beacons of 256 bytes out of random data over port 443.

P1- lab03-02

1. How can you get this malware to install itself?
   Using PE-bear we are able to easily see the exports of this DLL file.
   When comparing this with the imports shown in PEview it becomes quite clear that this DLL needs to be installed as a service
   drag and drop the lab03-03.dll sample in PEstudio
   In string section check whether the files like createservices, openservices, readservices are imported
   drag and drop the sample lab03-o2 in die.exe
   It is observed that the malware wants to install itself by the strings
   In string windows xp 6.11 is observed this means that it just runs on windows xp

2. How would you get this malware to run after installation?
   Given this has installed as a service and we know the name is IPRIP we can run it through either the net utility, or SC Tool.
   sc start IPRIP
   net start IPRIP

3. How can you find the process under which this malware is running?
   By searching for the specified DLL, or looking at the DLLs loaded by a process in Process Explorer, we’re able to get the process ID of the svchost process which is running this malware.
   open the file lab03-02.dll in process explorer

4. Which filters could you set in order to use procmon to glean information?
   open procmon.exe
   select process name in first text box and give the name of file lab03-02 and click on add and then click on apply

5. What are the malware’s host-based indicators?
   drag and drop the sample lab03-02 in PEstudio
   By examining the service which is created we can get a number of host-based indicators.
   IPRIP
   Intranet Network Awareness (INA+)
   Depends INA+, Collects and stores network configuration and location information, and notifies applications when this information changes.
   HKLM\SYSTEM\CurrentControlSet\Services\IPRIP\Parameters\ /v servicedll

6. Are there any useful network-based signatures for this malware?
   By running Fakenet on the host we’re able to intercept the malware’s request and determine what it is sending to a remote server. 
   In this case it uses a specified domain name, uses port 80, always fetches a specific file, and uses a custom but unique User-Agent.
   practicalmalwareanalysis[.]com
   port 80
   serve.html
   User-Agent %ComputerName% Windows XP 6.11


P1 - lab03-03

1. What do you notice when monitoring this malware with Process Explorer?
   open the lab03-o3 in process explorer
   If we monitor this malware with Process Explorer we can see it briefly spawns svchost before both processes vanish.
   At this point if we look closer into the memory strings of running svchost processes, 
   we can see that this malware has used process replacement (more commonly known as process hollowing nowadays) to execute under the guise of a svchost process.

2. Can you identify any live memory modifications?
    open the file in svchost.exe
   As mentioned by looking into the live memory of svchost we can see the strings differ significantly on disk to what is in memory.

3. What are the malware’s host-based indicators?
   We can see both in memory, and on disk that the malware creates a file called practicalmalwareanalysis.log
   
4. What is the purpose of this program?
   By opening wordpad and typing out some content, we can then open up practicalmalwareanalysis.log and see that it has logged all of our keystrokes.
   From this we can conclude that this uses process hollowing to run a keylogger on the infected machine through svchost.exe

   
P3 - lab03-04

1. What happens when you run this file?
   When we run this file it immediately deletes itself. We can see this event coming from the program spawning a del (delete) command from a command prompt.
   
2. What is causing the roadblock in dynamic analysis?
   This could be caused by command line parameters needing to be passed to the program, it needing to fetch a particular file from a remote location, it detecting it is in a sandbox, it only targeting a particular timezone, or it only running on a specific domain. Some clues can be found by looking at the program strings.

3. Are there other ways to run this program?
   Attempting to run with the below enumerated through strings still results in the file being deleted, so at this stage we cannot do much more.
   
    
